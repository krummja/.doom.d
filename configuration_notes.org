#+OPTIONS: toc:nil
#+EXPORT_FILE_NAME: config_notes
#+TITLE: Configuration Notes

* Table of Contents :TOC_3_ORG:
- [[Configuration][Configuration]]
  - [[Init][Init]]
    - [[DOs and DONTs][DOs and DONTs]]
  - [[Packages][Packages]]
    - [[DOs and DONTs:][DOs and DONTs:]]
    - [[Installing packages][Installing packages]]
  - [[Config][Config]]
    - [[DOs and DONTs][DOs and DONTs]]
    - [[Basic Macros][Basic Macros]]
    - [[Keybinding][Keybinding]]
  - [[Additional Files][Additional Files]]
  - [[Writing Modules][Writing Modules]]
    - [[Module Structure][Module Structure]]
- [[Helm-Find-Files][Helm-Find-Files]]

* Configuration
Doom Emacs can be configured by modifying the files found in your local =$DOOMDIR=. Doom expects this to be either =$HOME/.config/doom/= or =$HOME/.doom.d/=. When Doom is first set up, this directory contains three files:

** Init
This is where the =doom!= block is found. This controls which Doom modules are enabled and their load order. This file is evaluated early during Emacs startup, before any other modules get loaded. This file should generally not be modified apart from (un)commenting specific lines to enable or disable modules.

Note that a Doom "module" is actually just the Doom-specific term for a layer. It is a bundle of packages, configurations, and commands that can be collectively toggled on or off.

*** DOs and DONTs
**** DO:
- Configure Emacs to perform setup/teardown operations that must happen early, before other modules (or the module in question) are loaded.
- Reconfigure packages defined in Doom modules with =use-package-hook!=.
- Configure behavior of =bin/doom= in a way that must also apply in interactive sessions.
**** DONT:
- Configure packages with =use-package!= or =after!=.
- Perform expensive or error-prone operations.
- Define new =bin/doom= commands; use =cli.el= instead.

** Packages
   Package management happens here. Declare packages to install and where they should be installed from.

   Note that Doom Emacs does not utilize =package.el=. Instead, it uses its own package manager which relies on =packages.el=, which becomes a repository of resources for your own configuration in =config.el=.

*** DOs and DONTs:
**** DO:
- Declare packages with the =package!= macro.
- Disable single packages with =package!='s =:disable= property, or multiple with the macro =disable-packages!=.
- Use the =featurep!= macro to make the packages conditional based on the state of another module or the presence of a flag.
**** DONT:
- Configure packages here (absolutely no =use-package!= or =after!= in this file!). This file is read in an *isolated environment* and will have no lasting effect.
- Perform expensive calculations. These files are read often and sometimes multiple times.
- Produce any side-effects, for the same reason.

*** Installing packages
**** Basic Installation
To install a package, add a =package!= declaration to =$DOOMDIR/packages.el=.

#+BEGIN_SRC emacs-lisp
;; Install a package named "example" from ELPA, MELPA, or Emacsmirror
(package! example)
#+END_SRC

**** Dependency Chaining
The =package!= macro will return non-nil if the package is cleared for install and has not otherwise been disabled elsewhere in the configuration. You can leverage this to chain package dependencies together.

#+BEGIN_SRC emacs-lisp
(when (package! example)
  (package! plugin-that-example-depends-on))
#+END_SRC

**** Installing from External Sources
To install a package straight from its source, like from github, you can specify a MELPA-style straight recipe.

#+BEGIN_SRC emacs-lisp
(package! example
  :recipe (:host github :repo "username/my-example-fork"))
#+END_SRC

**** Disabling Packages
A package can be disabled by using the =:disable= property of the =package!= macro.

#+BEGIN_SRC emacs-lisp
(package! example :disable t)
#+END_SRC

Alternatively, multiple packages can be disabled with the macro =disable-packages!=.

#+BEGIN_SRC emacs-lisp
(disable-packages! example some_other_package)
#+END_SRC

**** Prefer Built-ins
You might want to install a package only if Doom does not have it built-in.

#+BEGIN_SRC emacs-lisp
(package! example :built-in 'prefer)
#+END_SRC

** Config
This is where the majority of your private configuration should go. Anything in this file is evaluated after all Doom modules have been loaded.

*** DOs and DONTs
**** DO:
- Use =after!= and =use-package!= to configure packages.
- Lazy load packages with =use-package='s =:defer= property.
- Use the =featurep!= macro to make some configuration conditional based on the state of another module or the presence of a flag.
**** DONT:
- Use =package!=.
- Install packages with =package.el= or =use-package='s =:ensure= property. That is what =packages.el= is for.

*** Basic Macros
**** Set Variables
#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "Fira Code"
                           :size 12))
#+END_SRC

**** Defer
#+BEGIN_SRC emacs-lisp
(after! evil
  (setq evil-magic nil))
#+END_SRC

**** Hook
#+BEGIN_SRC emacs-lisp
(add-hook! python-mode
           (setq python-shell-interpreter "bpython"))
#+END_SRC

**** Use Package
#+BEGIN_SRC emacs-lisp
(use-package! hl-todo
  :hook (prog-mode . hl-todo-mode)
  :init
  ;; Code here will run immediately
  :config
  ;; Code here will run after the package is loaded
  (setq hl-todo-highlight-punctuation ":"))
#+END_SRC

*** Keybinding

** Additional Files
Any files beyond the three that come stock in Doom emacs are not given any particular treatment. These files must be manually loaded, and can be organized however you wish. One convention that has emerged in the Doom community applies to such files in the root of the module: append a =+= to the file name, e.g. =+extra.el=.

These additional files can be loaded using the =load!= macro.

#+BEGIN_SRC emacs-lisp
;; Omitting the .el extension allows Emacs to load the byte-compiled version, if available.
(load! "+git")
#+END_SRC

** Writing Modules
To create a module for Doom, you can simply make a directory for it in =$DOOMDIR/modules/=. If you have a module =$DOOMDIR/modules/abc/xyz= then you can add =:abc xyz= to your =doom!= block in =$DOOMDIR/init.el=.

If a private module possesses the same name as a built-in Doom module (e.g. =:lang org=), it will replace the built-in module. You can exploit this to rewrite modules.

*** Module Structure
A module can minimally have *nothing* inside of it. But a minimal functional module will have at least a =packages.el= file to declare all packages it will install and a =config.el= file to configure and load those packages. Occasionally an =autoload.el= can be included to store a module's functions, to be loaded when used.

* Helm-Find-Files
[[file:~/.emacs.d/.local/straight/repos/helm/helm-files.el::defun helm-ff-RET (][Helm-FF-RET]]

In =helm-files.el= I can find the following definition for =helm-ff-RET=:

#+BEGIN_SRC emacs-lisp
(defun helm-ff-RET ()
  (interactive)
  (helm-ff-RET-1)
  )
#+END_SRC

The accompanying docstring states that if the candidate targeted on calling this function is a file, then it opens it - clearly using =helm-ff-RET-1=. This is defined just above =helm-ff-RET=:

#+BEGIN_SRC emacs-lisp
(defun helm-ff-RET-1 (&optional must-match)
  (let ((sel (helm-get-selection))
        non-essential)
    (cl-assert sel nil "Trying to exit with no candidates.")
    (if
        (and
         (or (file-directory-p sel))
         (null current-prefix-arg)
         (null helm-ff--RET-disabled)
         (or (and (file-remote-p sel)
                  (string= "." (helm-basename sel))
                  (string-match-p "\\`[/].*:.*:\\'"
                                  helm-pattern))
             (not (string= "." (helm-basename sel)))))
        (helm-execute-persistent-action)
      (if must-match
          (helm-confirm-and-exit-minibuffer)
        (helm-maybe-exit-minibuffer)))))
#+END_SRC

Which says, get the current selection and pass it to a conditional.

=IF  [current-prefix-arg is null]=
    =AND
    [helm-ff--RET-disabled is null]=
=THEN=
    =[helm-execute-persistent-action]=
